{"name":"jqol-tlc","enabled":true,"description":"Talisman collation","type":"group","id":1,"items":[{"type":"function","name":"onLoad","enabled":true,"id":2,"code":"// Talismans\n//  deconstructed\n\ntls = typeof tls !== 'undefined' ? tls : {}\n// if 'tls' exists, use the existing 'tls' or make 'tls' a Javascript Object\n// '{}' indicates a Javascript Object\n// think of a Javascript Object as a collection of things\n\ntls.main = '#output_main'\n// this variable will tell us what what to push our formatted stuff to\n// the apostrophes bracket a variable called #output_main, which makes it a Javascript variable that is a string\n// note that tls.main means 'main' (which is '#output_main' in this case) is a key in the 'tls' Object.\n// this means that for tls and tls only (as far as we know), 'main' means '#output_main'\n\ntls.send = send_command\n// this variable is unnecessary but helps us put all of the Nexus functions we will use later to the top, so if Tecton & Company make changes, we can easily change them here so it propagates to our entire module\n// send_command in particular lets us send things to the Achaean server\n// send_command belongs to Nexus and we're just borrowing it\ntls.write = ow_Write\n// this line does the same function as 'tls.send = send_command'\n// ow_Write in particular lets us write things to the display window without sending that to the Achaean server\n// ow_Write belongs to Nexus and we're just borrowing it\ntls.fontsize = 8\n// setting our font size, the units of which are 'pt'\ntls.inventory = {}\n// gives us a place to save the information about our talisman pieces\n// again, this is a Javascript Object and will help us later!\ntls.separator = '|'\n// this should be your in-game separator\n// again, this is a Javascript String\ntls.dragons = ['Black','Blue','Gold','Green','Red','Silver']\n// this is a little different from an Object\n// this is a Javascript Array containing the types of Dragons\n// a Javascript Array is different from a Javascript Object in that order matters\n// what you put in first can be summoned using its position, not its name\ntls.pieces = ['claw','heart','tooth','scale','leather','bone','eye','special']\n// another Javascript Array\ntls.specials = {\n  Black : 'acid sac',\n  Blue  : 'lung',\n  Gold  : 'brain stem',\n  Green : 'poison sac',\n  Red   : 'belly',\n  Silver: 'larynx',\n}\n// this is a full Javascript Object!\n// if you compare this to a Javascript Array, see that Black is allowed to have an associated meaning... 'acid sac'\n// if you asked Javascript what does 'tls.specials[\"Black\"]' means, it will tell you 'acid sac'\n// this is an easy way to store associations\n// note that you can also store Object in Objects!\n\ntls.rpad = function(str, len, char)\n{\n  if (typeof str == 'number') { str = tostring(str) }\n  if (char == null) { char = ' ' }\n  var newLine = str + char.repeat( Math.max( len - str.length, 0 ) )\n  return newLine\n}\n// ok, this is a little different\n// this is a Javascript Function\n// the first line of four tells us a few things!\n//     tls.rpad = function(str, len, char)\n// 'tls.rpad' is the NAME of the function, so if we want to use it, we call it like so: tls.rpad()\n// '= function(' tells us to make tls.rpad a function\n// 'str, len, char)' tells us that this function will want 3 bits of information: str, len and char\n// it may or may not require these bits of information but the suspicion is that this function will work on those bits of information\n// so what does this function do?\n// this function pads any string with extra characters\n// for example, '4' can become '0004' or '   4' or 'xxx4'\n\n// What about the next line?\n//     if (typeof str == 'number') { str = tostring(str) }\n// what does this line do?\n//  it checks a statement and sees if it is true!\n// which statement? Well, the things in the bracket is what it checks for truthiness. This is:\n//    typeof str == 'number'\n// this statement grabs the type of variable that 'str' is\n// then, with '==', it compares that information to the word 'number'\n// in essence, this statement examines if the variable 'str' is a Javascript Number\n// if this is true, then this statement runs that code in the curly braces\n//    str = tostring(str)\n// this line converts the variable str into a Javascript String\n// so, in plain english,\n//    if 'str' is a Javascript Number, then turn it into a Javascript String\n// note that tostring is a native Javascript Function, we never defined it!\n\n// What about the next line?\n//     if (char == null) { char = ' ' }\n// in plain English,\n//    if 'char' is null, then make char a space (character)\n// here, null is a special value for a Javascript variable\n// it is neither a Javascript Object or Javascript String or Javascript Number or Javascript Array\n// the simpler explanation is that null means it did not exist\n\n// What about the next line?\n//    var newLine = str + char.repeat( Math.max( len - str.length, 0 ) )\n// this line is a bit complicated\n// let's look at this bit:\n//    len - str.length\n// this bit tells us to find the difference between the variable 'len' and str.length\n//    Math.max( len - str.length, 0 )\n// this bit tells us to use the bigger value of (len - str.length) or 0\n// we often do this to avoid negative numbers\n//    char.repeat( stuff )\n// this bit tells us to repeat the variable 'char' for 'stuff' number of times\n//    str + char.repeat( stuff )\n// this bit tells us to join the repeated string to our original variable 'str'\n//    var newLine = \n// this bit tells us to save our work into a variable 'newLine', but only while this function is actively working\n// putting it all together, this line in simple English says,\n//    first, find the difference between how long we want the new line and the current line.\n//    make sure that this is not less than zero\n//    then, repeat the special character as many times as the difference is\n//    then, join these extra bits to the original string\n//    store this in the variable 'newLine'\n\n// What about the next line?\n//     return newLine\n// this line tells the function 'tls.rpad' to give us back the new Javascript String once it is done working\n// to get access to the work 'tls.rpad' has done, we often invoke the function like so:\n//    var omgyes = tls.rpad('omg',5,'3')\n// in this scenario, tls.rpad will return \"omg33\"\n// you can then access this information by using 'omgyes'\n\n// var thisAwesome = tls.rpad('whatdo',10,'z')\n// tell me what 'thisAwesome' is: whatdozzzz\n// var wellThat = tls.rpad('Australia',12)\n// tell me what 'wellThat' is: 'Australia   '\n\n// hopefully that is semi-useful\n\ntls.lpad = function(str, len, char) {\n  if (typeof str == 'number') { str = tostring(str) }\n  if (char == null) { char = ' ' }\n  return char.repeat( Math.max((len - str.length), 0)) + str\n}\n// this function is very similar to 'tls.rpad' but you guessed it, pads on the left hand side of the string instead\n// give me tls.lpad('Tysandr', 15)\n// in plain English,\n//   given 'str', 'len' and 'char'\n//   firstly, if 'str' is a Number, turn it into a Javascript String\n//   secondly, if 'char' does not exist, make it a blank space ' '\n//   now, give me back the result of this operation\n//      first, determine the difference between 15 & 'Tysandr's length: 8\n//      give me the bigger number, 8 or 0: 8\n//      for 8 times, repeat the variable 'char': '        '\n//      add '        ' to 'Tysandr'\n//   give back '        Tysandr'\n\ntls.inject = function(rule) {\n  $('body').append('<div class=\"tls-rules\">&shy;<style>' + rule + '</style></div>')   \n}\n// What does this Function do?\n// 'tls.inject' lets us change some formatting in Nexus!\n// something new here\n//     $('body')\n// this is a special way to select information from the webpage\n// it uses something called JQuery which is essentially a collection of useful shortcuts (as a simplified explanation)\n// this line in particular tells us to grab the data/information surrounding 'body' which in webpages generally refers to the main body\n//     $('body').append(\n// '.append' is actually similar to how we call 'tls.rpad'\n// in essence, it is telling us to call the Javascript Function associated with $('body')\n// because this is primarily JQuery implementation, I will give a brief simplified explanation:\n// $('body').append is a function that lets us stuff things into the webpage\n// What are we 'appending'? This thing!\n//    '<div class=\"tls-rules\">&shy;<style>' + rule + '</style></div>'\n// Again, I will give the simplified version:\n// this line is a Javascript String that we will magically turn (with JQuery's help) into a html thing\n// What html thing?\n// It creates a 'div' which is like a paragraph inside a webpage, although more accurately a 'p' is a paragraph but a 'div' is more flexible.\n// Web programmers call these 'elements', which is why you may sometimes see notations like 'el' or 'e' or 'elem' for 'element' (though sometimes they use 'e' for 'events'\n// So, we are adding a paragraph to Nexus, but we don't really want to show anything... how to fix this?\n// here's a special trick I picked up from another programmer on StackOverflow\n//    &shy;\n// this is the special sequence for a character that is essentially invisible (not really, but close enough)\n// see here for a full list: https://dev.w3.org/html5/html-author/charref\n// essentially we've added an invisible paragraph\n// but why do that?\n// we do that because it lets us inject the thing called 'rule'\n// note that 'rule' is injected inside '<style></style>'\n// this means that if 'rule' is 'dragonmonkey', we end up with '<style>dragonmonkey</style>'\n// webpages use '<style></style>' to interpret styling formats\n// these accented brackets are commonly used to convey information, and some may not be directly placed on the webpage. Web Programmers call them 'tags'.\n// <div></div> is a tag\n// <style></style> is a tag\n// <p></p> is a tag\n// these are the tags we have already discussed, but there are many many more\n// So in summary, 'tls.inject' is a Javascript Function that lets us inject into the 'body' an invisible paragraph that lets us write new rules for the webpage Nexus\n\nif ( $('.tls-rules').length ) { $('.tls-rules').remove() }\n// Note that this line is not a Javascript Function\n// it is a direct line of code to write\n// What does it do?\n// it examines for existing rules\n// how does it know what rules belong to us and what belongs to other packages and/or Nexus natively?\n// note the selector $('.tls-rules')\n// this is again JQuery being helpful\n// it grabs all the 'elements' on the Nexus webpage that have the Class 'tls-rules'\n//     $('.tls-rules').length\n// this helps us by testing for all elements with class 'tls-rules' and looking for a real length\n// if the length is real, then remove them\n//     $('.tls-rules').remove()\n// this line removes them\n// ** In plain English,\n//    if you find any elements that have the class 'tls-rules', then remove it\n\ntls.inject('.BlackDragon   { color: rgba(165,175,185,1); }')\ntls.inject('.BlueDragon    { color: rgba(135,165,210,1); }')\ntls.inject('.GoldDragon    { color: rgba(180,165, 85,1); }')\ntls.inject('.GreenDragon   { color: rgba(155,185, 85,1); }')\ntls.inject('.RedDragon     { color: rgba(200, 25, 25,1); }')\ntls.inject('.SilverDragon  { color: rgba(140,140,140,1); }')\n// Here we are calling the Javascript Function 'tls.inject' that we defined earlier\n// We are giving Nexus a few new rules of coloring\n// In particular, we are saying\n//    for class BlackDragon, use this color 165red, 175green, 185blue with full(1)opacity\n// ditto for the other classes\n// how do we know it is 'class' we are defining and not some other thing?\n// see how we had the '.' in front of 'BlackDragon'?\n// this is CSS's notation for 'class'\n// if you remember at the start, we wrote '#output_main'?\n// this is the representation for a html thing when we do $('#output_main')\n// however, we did not write '.output_main'\n// this is because instead of '.', '#' represents an 'id'\n// what is the difference?\n// 'class' can be owned by more than one element\n// 'id' should only be held by one element\n\ntls.reset = function() {\n  for (var k in tls.dragons) {\n    var type = tls.dragons[k]\n    tls.inventory[type] = {}\n    for (var n in tls.pieces) {\n     var piece = tls.pieces[n]\n     var special = false\n     if (piece == 'special') { piece = tls.specials[type]; special = true }\n     tls.inventory[type][piece] = {}\n     if (special) {\n      for (var i=1; i<4; i++) { tls.inventory[type][piece]['L'+i] = 0 }\n     } else {\n      for (var i=1; i<8; i++) { tls.inventory[type][piece]['L'+i] = 0 }\n     }\n    }\n  }\n}\n// Will try to keep this briefer\n// the new thing here we see is \n//    for (var k in tls.dragons)\n// this tells us to do whatever is in the following curly braces for every piece of information in 'tls.dragons'\n// when we do: for (var i=1; i<4; i++)\n// we are doing the same thing but in order of 1,2,3,4\n// so, in plain English,\n//   for every item in 'tls.dragons' (['Black','Blue','Gold','Green','Red','Silver'])\n//   make tls.inventory keep memory of the 'Black' or 'Blue or whatever color\n//   for every type of piece for every type of dragon, do this\n//   if we are writing for a special piece, look up what type of special piece belongs to this color\n//   make tls.inventory keep memory of each type of piece for each dragon\n//   if it is special, for every level of talisman up to 4, set it to 0\n//   otherwise, for every level of talisman up to 8, set it to 0\n// In the end, we should have something like this:\n// tls.inventory\n//              .Black\n//                    .claw\n//                         .L1 = 0\n//                         .L2 = 0\n//                         ...\n//                         .L8 = 0\n//                    .heart\n//                         .L1 = 0\n//                         .L2 = 0\n//                         ...\n//                         .L8 = 0\n//                    ...\n//              .Blue\n//                    ...\n//              .Green\n// etc, etc\n\n// Will now try to keep it brief as we should have covered most of the basic concepts in Nexus:Javascript\ntls.check = function() {\n  tls.reset()\n  var str = ''\n  str = 'more' + tls.separator\n  str += 'talisman pieces' + tls.separator + str + str + str + str + str + str\n  tls.send(str)\n}\n// In plain English,\n//  reset 'tls.inventory'\n//  make a new Javascript String\n//  make this String do 'talisman pieces|more|more|more|more|more|more'\n//  send this String\n\ntls.parse = function(t) {\n  var type = t.type\n  tls.inventory[type] = tls.inventory[type] || {}\n  tls.inventory[type][t.piece] = tls.inventory[type][t.piece] || {}\n  var level = t.level\n  var count = t.count\n  tls.inventory[type][t.piece]['L'+level] = count\n}\n// In plain English,\n//  access inventory-dragontype\n//  access the type of piece for this type of dragon\n//  set the count of this level of this type of piece of this type of dragon\n\ntls.trigger = function(v) {\n  var t = {}\n  t.count = v[1]\n  t.type  = v[2]\n  t.piece = v[3]\n  t.level = v[4]\n  tls.parse(t)\n}\n// This function simply takes the captures from the trigger and allocates the meaning to the captures and sends it to 'tls.parse'\n\ntls.display = function() {\n  var str = ''\n  str += '<p class=\"mono\" style=\"white-space: prewrap;\">'\n  str += tls.rpad('', 26)\n  str += 'L1    '\n  str += 'L2    '\n  str += 'L3    '\n  str += 'L4    '\n  str += 'L5    '\n  str += 'L6    '\n  str += 'L7    '\n  str += '</p><br >'\n  for (var k in tls.inventory) {\n    for (var n in tls.inventory[k]) {\n     str += '<p>'\n     str += '<span class=\"' + k + 'Dragon mono\" style=\"white-space: prewrap;\">'\n     var gvc = k\n         gvc = tls.lpad(gvc, 7)\n     str += tls.rpad(gvc + ' Dragon ' + n, 26)\n     str += '</span>'\n     str += '<span class=\"mute mono\">'\n     var sum = 0\n     var special = false\n     for (var v in tls.specials) {\n       var e = tls.specials[v]\n       if (e == n) { special = true } }\n     for (var o in tls.inventory[k][n]) {\n       var count = parseInt( tls.inventory[k][n][o] )\n       var rank  = o\n           rank  = rank.replace('L','')\n           rank  = parseInt(rank)\n       sum += count * Math.pow(2, rank - 1)\n       if (count != 0) { str += '<span class=\"' + k + 'Dragon mono\">' }\n       str += tls.rpad('  ' + count, 6)\n       if (count != 0) { str += '</span>' }\n     }\n     if (special) {\n       str += tls.rpad('', 24) + '  <span class=\"' + k + 'Dragon mono\" style=\"white-space: prewrap;\">' + sum + '</span> / 4'\n     } else {\n       str += '  <span class=\"' + k + 'Dragon mono\" style=\"white-space: prewrap;\">' + sum + '</span> / 64' }\n     str += '</span>'\n     str += '</p>'\n    }\n  }\n  str = '<p><div style=\"font-size:'+tls.fontsize+'pt;\">' + str + '</div></p>'\n  // console.log(str)\n  tls.write( tls.main, str )\n  // console.log('Written out.')\n }\n \n// OK, quite a few things:\n//    class=\"mono\"\n// this gives the paragraph the class 'mono' which in Nexus tells it to use a monospaced font (that is a font that is the same width for every character)\n// this is important otherwise our numbers will not line up in columns\n//    class= k+'Dragon mono'\n// this line gives the element two classes, 'Black/Green/BlueDragon' AND 'mono'\n// it tells us that this element should be monospaced, but also be formatted according to the dragon color (remember injecting those rules with tls.inject?)\n//    parseInt( thing )\n// remember tostring()? This is the opposite function, turning a Javascript String into a Javascript Number\n// why do this? So we can do math to it\n//    sum += count * Math.pow(2, rank - 1)\n// if math isn't your strong suit, this simply allows you to add all the pieces together, but making each higher level count twice as much as the previous level: Level 4 = worth 8 x Level 1\n// 1xLevel 4 = 2xLevel 3 = 4xLevel 2 = 8xLevel 1 = 3^2xLevel1\n//    white-space: prewrap;\n// HTML likes to summarise multiple blank spaces and make it a single space\n// this line prevents that\n//    tls.write( tls.main, str )\n// write (tls.write) 'str' to the output (tls.main: '#output_main') "},{"type":"trigger","name":"Talisman Trigger","enabled":true,"id":3,"matching":"regexp","whole_words":true,"case_sensitive":true,"text":"^(?:B|P)[ ]+?(\\d+)[ ]+a (\\w+) Dragon's (\\w+)[ ]+?(\\d+)[ ]+?Dragon[ ]+?(\\w+)$","actions":[{"action":"script","script":"tls.trigger(args)"}]},{"type":"trigger","name":"Talisman Trigger","enabled":true,"id":4,"matching":"regexp","whole_words":true,"case_sensitive":true,"text":"^(?:B|P)[ ]+?(\\d+)[ ]+a (\\w+) Dragon (\\w+)[ ]+?(\\d+)[ ]+?Dragon[ ]+?(\\w+)$","actions":[{"action":"script","script":"tls.trigger(args)"}]},{"type":"trigger","name":"Talisman Trigger","enabled":true,"id":5,"matching":"regexp","whole_words":true,"case_sensitive":true,"text":"^(?:B|P)[ ]+?(\\d+)[ ]+(\\w+) Dragon (leather)[ ]+?(\\d+)[ ]+?Dragon[ ]+?(\\w+)$","actions":[{"action":"script","script":"tls.trigger(args)"}]},{"type":"trigger","name":"Talisman Trigger","enabled":true,"id":6,"matching":"regexp","whole_words":true,"case_sensitive":true,"text":"^(?:B|P)[ ]+?(\\d+)[ ]+a (Black|Gold|Green) Dragon's (acid sac|brain stem|poison sac)[ ]+?(\\d+)[ ]+?Dragon[ ]+?(\\w+)$","actions":[{"action":"script","script":"tls.trigger(args)"}]},{"type":"alias","name":"tlc, Talisman Check","enabled":true,"id":7,"matching":"regexp","whole_words":true,"case_sensitive":true,"prefix_suffix":true,"actions":[{"action":"script","script":"tls.check()"}],"text":"^tlc$"},{"type":"alias","name":"tls, Talisman Display","enabled":true,"id":8,"matching":"regexp","whole_words":true,"case_sensitive":true,"prefix_suffix":true,"actions":[{"action":"script","script":"tls.display()"}],"text":"^tls$"}]}
